{"definition_id":"e9c123c0-4339-4001-bb4a-f5f453fd97a3","last_refresh_timestamp":1385149495639,"postexecution_handlers":[],"definition":{"id":"e9c123c0-4339-4001-bb4a-f5f453fd97a3","code":"import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.io.File;\nimport net.sf.json.JSONObject;\nimport org.apache.commons.io.FileUtils;\nimport net.sf.json.JSONArray;\nimport net.sf.json.JSONNull;\nimport net.sf.json.JSONObject;\nimport java.util.Iterator;\nimport org.apache.commons.io.filefilter.FileFilterUtils;\nimport org.apache.commons.io.filefilter.HiddenFileFilter;\nimport org.apache.commons.io.filefilter.IOFileFilter;\n\n\n\ndef deWindowize(String path){\n   String normalizePath = path.replace(\"\\\\\",\"/\");   \n  \n   //remove windows drive letter part of the path\n   if(normalizePath.indexOf(':') != -1)\n      normalizePath = normalizePath.substring(normalizePath.indexOf(':')+1);  \n  \n   return normalizePath;\n}\n\ndef StringOrNull(Object obj){\n  if(obj == JSONNull.getInstance() || obj == null)\n  return null;\n  \n  return obj.toString();\n}\n\n\n\ndef runCrud(){\n\n      String assetBaseDir = new File(crud.appBaseDir()+\"/\"+crudzilla.sysSettings().get(\"crudzilla_asset_base\")).getCanonicalPath();\n      File file = new File(assetBaseDir+\"/\"+relPath);\n      \n      if(file.isFile()){\n        //get category if it exist otherwise create it\n        //add(\"taxonomyPath\",deWindowize(new java.io.File(relPath.substring(0,relPath.lastIndexOf(\"/\"))).getCanonicalPath())).call(findAppTaxonomy);\n        \n        crud.add(\"file\",file)\n        .add(\"ext2Mime\",ext2Mime)\n        .add(\"includedExts\",includedExts)\n        .add(\"directory\",directory)\n        .add(\"iwriter\",iwriter)\n        .add(\"relPath\",relPath)\n        .call(\"index-file.ste\");\n      }\n      else  \n      {\n        \n        // Create a FileFilter\n        IOFileFilter directories = FileFilterUtils.and(FileFilterUtils.directoryFileFilter(),HiddenFileFilter.VISIBLE);\n        \n        List<IOFileFilter> includedFiles = new ArrayList<IOFileFilter>();\n        \n        for(String ext:includedExts){\n          includedFiles.add(FileFilterUtils.and(FileFilterUtils.fileFileFilter(),FileFilterUtils.suffixFileFilter(ext)));\n        }\n        \n        //or all the file extension filters\n        IOFileFilter includedFile = includedFiles.get(0);                    \n        for(int i=1;i<includedFiles.size();i++)\n            includedFile = FileFilterUtils.or(includedFile,includedFiles.get(i));                    \n        \n        final IOFileFilter filter      = FileFilterUtils.or(directories, includedFile);     \n        \n        File[] files = FileFilterUtils.filter(filter,file.listFiles());\n        \n        for(File f:files){\n          if(f.isFile()){\n            crud.add(\"file\",f)\n            .add(\"ext2Mime\",ext2Mime)\n            .add(\"includedExts\",includedExts)\n            .add(\"relPath\",relPath+\"/\"+f.getName())\n            .add(\"directory\",directory)\n            .add(\"iwriter\",iwriter)\n            .call(\"index-file.ste\");\n          }\n          else\n          {\n            crud.add(\"relPath\",relPath+\"/\"+f.getName())\n            .add(\"ext2Mime\",ext2Mime)\n            .add(\"includedExts\",includedExts)\n            .add(\"directory\",directory)\n            .add(\"iwriter\",iwriter)\n            .call(\"index-directory.ste\");\n          }\n        }\n      }\n}\n\nrunCrud();","name":"index-directory","description":"","crudType":"scriptexecutor","type":"groovy","serverSideOnly":"yes","requireAllIdentities":"no","lastModifiedTimeStamp":"1385149493280"},"preexecution_handlers":[],"execution_parameters":[],"reference_id":"ddbe220f-f47d-421d-9519-36d72926adba","accesscontrols":[]}