{"definition_id":"8e849574-af8a-4b3e-8e30-56740acb4488","last_refresh_timestamp":1393383125090,"postexecution_handlers":[],"definition":{"id":"8e849574-af8a-4b3e-8e30-56740acb4488","code":"import java.util.Map;\nimport java.util.HashMap;\nimport com.crudzilla.platform.util.CrudzillaUtil;\nimport java.io.File;\nimport java.io.Writer;\nimport java.io.FileNotFoundException;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport org.apache.commons.io.FileUtils;\nimport com.crudzilla.platform.util.AssetFSManager;\nimport net.sf.json.JSONObject;\n\n\n\ndef buildCrudNode(Map crudNode,File file,String mime,String relPath){\n  crudNode.put(\"name\",file.getName()/*.substring(0,file.getName().lastIndexOf(\".\"+mime))*/);\n  crudNode.put(\"relPath\",relPath);\n  crudNode.put(\"isFolder\",true);\n  crudNode.put(\"mime\",mime);\n  \n  List subNodes = new ArrayList();\n  List excludes = new ArrayList();\n  crudNode.put(\"excludes\",excludes);\n  crudNode.put(\"files\", subNodes);  \n  \n  Map subNode = new HashMap();        \n  subNode.put(\"name\",\"executable\");\n  subNode.put(\"relPath\",relPath);\n  subNode.put(\"isFolder\",false);\n  subNode.put(\"mime\",mime);\n  subNodes.add(subNode);\n  \n  try\n  {\n    JSONObject refFile = JSONObject.fromObject(FileUtils.readFileToString(file));    \n    crudNode.put(\"id\",refFile.getString(\"definition_id\"));\n    \n    if(refFile.get(\"definition\").getString(\"crudType\").compareTo(\"scriptexecutor\") == 0){\n      if(refFile.get(\"definition\").getString(\"type\").endsWith(\"velocity-template-file\")){        \n          subNode = new HashMap();        \n          subNode.put(\"name\",file.getName().substring(0,file.getName().lastIndexOf(\".\"+mime))+\".vm\");\n          subNode.put(\"relPath\",relPath);\n          subNode.put(\"isFolder\",false);\n          subNode.put(\"mime\",\"vm\");\n          subNodes.add(subNode);     \n        \n          excludes.add(file.getName().substring(0,file.getName().lastIndexOf(\".\"+mime))+\".vm\");\n      }\n    }\n  }catch(Exception ex){\n    crud.logger().error(\"Error reading crud file for listing\",ex);\n    subNode.put(\"corrupt\",\"true\");\n  }\n}\n  \ndef walk(String fullPath,String relPath,int currentDepth,int depthLimit){\n  \n  Map fileJSON = new HashMap();\n  File file = AssetFSManager.resolveToAssetBase(crudzilla,fullPath);\n  \n  //is this is a datastatement reference\n  if(file.isFile() && file.getName().endsWith(\".stm\")){\n    buildCrudNode(fileJSON,file,\"stm\",relPath);\n  }\n  else\n    if(file.isFile() && file.getName().endsWith(\".ste\")){\n      buildCrudNode(fileJSON,file,\"ste\",relPath);          \n    }            \n  else\n    if(file.isFile() && file.getName().endsWith(\".esd\")){\n      buildCrudNode(fileJSON,file,\"esd\",relPath);        \n    }        \n  else\n    if(file.isFile() && file.getName().endsWith(\".upl\")){\n      buildCrudNode(fileJSON,file,\"upl\",relPath);         \n    }        \n  else\n    if(file.isFile() && file.isFile() && file.getName().endsWith(\".svc\")){\n      buildCrudNode(fileJSON,file,\"svc\",relPath);         \n    }  \n  else\n    if(file.isFile() && file.getName().endsWith(\".ins\")){\n      buildCrudNode(fileJSON,file,\"ins\",relPath);\n    }\n  else\n  {\n    fileJSON.put(\"name\",file.getName());\n    fileJSON.put(\"relPath\",relPath);\n    fileJSON.put(\"isFolder\",file.isDirectory());          \n  }\n  \n  \n  \n  if( file.isDirectory() && (depthLimit == -1 || depthLimit>currentDepth)){\n    List files = new ArrayList();\n    fileJSON.put(\"files\", files);            \n    \n    String [ ] entries = file.list( );\n    \n    for( int j = 0; j < entries.length; j++ )\n    {\n      String relativePath = (relPath.isEmpty() || relPath.compareTo(\"/\") == 0)?\"/\"+entries[ j ]:relPath+ \"/\" + entries[ j ];\n      \n      Map subTree = walk(fullPath+ \"/\" + entries[ j ],relativePath,currentDepth+1,depthLimit);                \n      files.add(subTree);\n    }    \n  }        \n  return fileJSON;\n}    \n\ndef runCrud(){\n  int depth = arguments.get(\"depth\") != null?Integer.parseInt(\"\"+arguments.get(\"depth\")):-1;  \n  String actionPath = !relPath.isEmpty() && relPath.compareTo(\"/\") != 0 && relPath.endsWith(\"/\") ?relPath.substring(0,relPath.length()-1):relPath;\n  //if(!actionPath.isEmpty())\n  //    actionPath = \"/\"+actionPath;\n  \n  crud.logger().info(\"listing directory:\"+actionPath +\" from \"+relPath);\n  return walk(!actionPath.isEmpty() && actionPath.compareTo(\"/\") != 0?\"/\"+actionPath:\"/\",actionPath, 0, depth);\n}\n\nreturn runCrud();","name":"list-dir","description":"","crudType":"scriptexecutor","type":"groovy","serverSideOnly":"no","requireAllIdentities":"no","lastModifiedTimeStamp":"1393383124278"},"preexecution_handlers":[],"execution_parameters":[],"reference_id":"5b462e2c-d255-4bc4-b856-4c894bcbb468","accesscontrols":[]}